<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>nimf</string>
	</array>
	<key>name</key>
	<string>Nim Source Code Filter</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>\A(#!)</string>
			<key>end</key>
			<string>\z(!?\n)</string>
			<key>name</key>
			<string>meta.start.nim_filter</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*#</string>
					<key>end</key>
					<string>\n</string>
					<key>name</key>
					<string>comment.line.nim_filter</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\b((\d[_\d]*\.[_\d]+([eE][\+\-]?\d[_\d]*)?)|([eE][\+\-]?\d[_\d]*))('[fF](32|64))?</string>
							<key>name</key>
							<string>constant.numeric.float.decimal.nim_filter</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(0[xX][0-9A-Fa-f][_0-9A-Fa-f]*)('[iIuU](8|16|32|64))?</string>
							<key>name</key>
							<string>constant.numeric.integer.hexadecimal.nim_filter</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>For simplicity's sake, we don't enforce floats only having 32 and 64 prefix types.</string>
							<key>match</key>
							<string>\b(0o[0-7][_0-7]*)('[iIuUfF](8|16|32|64))?</string>
							<key>name</key>
							<string>constant.numeric.integer.octal.nim_filter</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(0(b|B)[01][_01]*)('[iIuUfF](8|16|32|64))?</string>
							<key>name</key>
							<string>constant.numeric.integer.binary.nim_filter</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(\d[_\d]*)('[iIuUfF](8|16|32|64))?</string>
							<key>name</key>
							<string>constant.numeric.integer.decimal.nim_filter</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Language Constants.</string>
							<key>match</key>
							<string>\b(true|false|inf|nil)\b</string>
							<key>name</key>
							<string>constant.language.nim_filter</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Keywords that affect program control flow or scope.</string>
							<key>match</key>
							<string>\b(block|break|case|continue|do|elif|else|end|except|finally|for|if|raise|return|try|when|while|yield)\b</string>
							<key>name</key>
							<string>keyword.control.nim_filter</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Keyword boolean operators for expressions.</string>
							<key>match</key>
							<string>(\b(and|in|is|isnot|not|notin|or|xor)\b)</string>
							<key>name</key>
							<string>keyword.operator.boolean.nim_filter</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Generic operators for expressions.</string>
							<key>match</key>
							<string>(\b()\b|(=|\+|-|\*|/|&lt;|&gt;|@|\$|~|&amp;|%|!|\?|\^|\.|:|\\)+)</string>
							<key>name</key>
							<string>keyword.operator.nim_filter</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Other keywords.</string>
							<key>match</key>
							<string>(\b(addr|as|asm|atomic|bind|cast|concept|const|discard|distinct|div|enum|export|from|import|include|let|mod|object|of|ptr|ref|shl|shr|static|tuple|type|var)\b)</string>
							<key>name</key>
							<string>keyword.other.nim_filter</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Invalid and unused keywords.</string>
							<key>match</key>
							<string>(\b(converter|generic|interface|lambda|mixin|out|shared|with|without)\b)</string>
							<key>name</key>
							<string>keyword.invalid.nim_filter</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Built-in, concrete types.</string>
							<key>match</key>
							<string>\b(((uint|int|float)(8|16|32|64)?)|bool|string|cstring|char|tobject|typedesc)\b</string>
							<key>name</key>
							<string>storage.type.concrete.nim_filter</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Built-in, generic types.</string>
							<key>match</key>
							<string>\b(range|array|seq|natural|set|ref|ptr)\b</string>
							<key>name</key>
							<string>storage.type.generic.nim_filter</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Function types</string>
							<key>match</key>
							<string>\b(proc|iterator|method|template|macro)\b</string>
							<key>name</key>
							<string>storage.type.function.nim_filter</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Common functions</string>
							<key>match</key>
							<string>\b(echo|newException)\b</string>
							<key>name</key>
							<string>keyword.function.nim_filter</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>Special types.</string>
							<key>match</key>
							<string>\b(openarray|varargs|void)\b</string>
							<key>name</key>
							<string>storage.type.generic.nim_filter</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\w[_\w]*)?\"\"\"</string>
							<key>comment</key>
							<string>(Raw) Triple Quoted String</string>
							<key>end</key>
							<string>\"\"\"[^"]</string>
							<key>name</key>
							<string>string.quoted.triple.nim_filter</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>r\"</string>
							<key>comment</key>
							<string>Raw Double Quoted String</string>
							<key>end</key>
							<string>\"</string>
							<key>name</key>
							<string>string.quoted.double.raw.nim_filter</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\"\"</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\w[_\w]*)?\"</string>
							<key>comment</key>
							<string>Double Quoted String</string>
							<key>end</key>
							<string>\"</string>
							<key>name</key>
							<string>string.quoted.double.nim_filter</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>(\\([abenrclftv]|["']|[0-9])|x[0-9A-Fa-f]{2})</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>comment</key>
							<string>Single quoted character literal</string>
							<key>match</key>
							<string>\'(\\\d{1,3}|\\?[^\n]?)\'</string>
							<key>name</key>
							<string>string.quoted.single.nim_filter</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.nim_filter</string>
	<key>uuid</key>
	<string>c6396a10-4bb4-4929-aee5-1d893828b098</string>
</dict>
</plist>
